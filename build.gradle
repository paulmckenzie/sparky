buildscript {
    ext {
        slf4JVersion = '1.7.30'
        restAssuredVersion = '4.2.0'
        mockitoVerstion = '3.3.0'
        jacksonVersion = '2.10.2'
        javalinVersion = '3.7.0'
        junitVersion = '5.5.2'
    }

    repositories {
        jcenter()
    }

    dependencies {
        classpath 'org.ajoberstar.reckon:reckon-gradle:0.12.0'
    }
}

plugins {
    id 'java'
    id 'application'
    id 'idea'
    id 'io.freefair.lombok' version '5.0.0-rc2'
    id 'com.gorylenko.gradle-git-properties' version '2.2.2'
    id 'org.ajoberstar.reckon' version '0.12.0'
    id 'com.google.cloud.tools.jib' version '2.1.0'
}

reckon {
    reckon.scopeFromProp()
    reckon.stageFromProp('dev', 'rc', 'final')
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

repositories {
    jcenter()
}

dependencies {
    implementation "org.slf4j:slf4j-simple:${slf4JVersion}"
    implementation "io.javalin:javalin:${javalinVersion}"
    implementation "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    implementation "com.fasterxml.jackson.module:jackson-module-parameter-names:${jacksonVersion}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:${jacksonVersion}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"

    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoVerstion}"
    testImplementation "org.mockito:mockito-inline:${mockitoVerstion}"
    testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVerstion}"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
}

application {
    mainClassName = 'sparky.App'
}

test {
    useJUnitPlatform()
}

sourceSets {
    integrationTest {
        compileClasspath += sourceSets.main.output + configurations.compile + configurations.testCompile
        runtimeClasspath += output + compileClasspath + configurations.testRuntime
    }
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom runtimeOnly
}

dependencies {
    integrationTestImplementation "io.rest-assured:json-path:${restAssuredVersion}"
    integrationTestImplementation "io.rest-assured:rest-assured:${restAssuredVersion}"
    integrationTestImplementation "io.rest-assured:rest-assured:${restAssuredVersion}"
}

task integrationTest(type: Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }

    useJUnitPlatform()

    shouldRunAfter test
}

jib {
    from {
        image = 'adoptopenjdk/openjdk11'
    }

    to {
        image = 'paulcmckenzie/sparky'
        project.afterEvaluate {
            tags = [version.toString(), 'latest']
        }
        auth {
            username = project.properties['docker_registry_username'] ?: 'no-name'
            password = project.properties['docker_registry_token'] ?: 'no-token'
        }
    }

}
